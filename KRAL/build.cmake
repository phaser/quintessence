# The project is licensed under GNU GPL v3. See $(PROJECT_ROOT)/docs/gpl-3.0.txt for more details.
#
# KRAL
# Copyright (C) 2011 Cristian Bidea

cmake_minimum_required (VERSION 3.0)
cmake_policy(SET CMP0054 NEW)

set (TARGET_NAME    0)
set (KRAL_PATH      1)
set (PACKAGE_DIRS   2)
set (PROJECTS_ROOT  3)
set (PLATFORM       4)
set (PROJECT_DIR    5)
set (BUILD_DIR      6)
set (PROJECT_TYPE   7)
set (BUILD_TYPE     8)
set (CUSTOM_ARGS    9)
set (NUM_PROPS          10)
set (NUM_PROPS_MINUS_1  9)
set (NUM_PROPS_MINUS_2  8)
set (LIST_NAMES "TARGET_NAME;KRAL_PATH;PACKAGE_DIRS;PROJECTS_ROOT;PLATFORM;PROJECT_DIR;BUILD_DIR;PROJECT_TYPE;BUILD_TYPE;CUSTOM_ARGS")

function(create_target LST)
    foreach (idx RANGE ${NUM_PROPS})
        list(APPEND ${LST} "_N_")
    endforeach()
    set (${LST} "${${LST}}" CACHE INTERNAL "${LST}" FORCE)
    set_target_value(${LST} ${TARGET_NAME} ${LST})
    set (${LST} "${${LST}}" CACHE INTERNAL "${LST}" FORCE)
endfunction()

function(set_target_value LST IDX VALUE)
    list(REMOVE_AT ${LST} ${IDX})
    list(INSERT ${LST} ${IDX} ${VALUE}) 
    set (${LST} "${${LST}}" CACHE INTERNAL "${LST}" FORCE)
endfunction()

macro(get_target_value LST IDX OVAL)
    list(GET ${LST} ${IDX} __TEMP)
    string(REPLACE "_&_" ";" OVAL "${__TEMP}")
endmacro()

macro(transform_to_list PLIST ML)
    string(REPLACE "_&_" ";" ML "${PLIST}")
endmacro()

function(print_target LST)
    list(GET ${LST} 0 OUTVAR)
    message ("Listing ${OUTVAR}...") 
    foreach(idx RANGE 1 ${NUM_PROPS_MINUS_1})
        list(GET LIST_NAMES ${idx} NVAR)
        list(GET ${LST} ${idx} OUTVAR)
        transform_to_list(${OUTVAR} ML)
        if ("${ML}" STREQUAL "_N_")
            set (ML "")
        endif()
        message("\t${NVAR}:\t${ML}")
    endforeach()
endfunction()

# Used by the INHERIT attribute to copy a target to another one
function(copy_target FROM TO)
    foreach (idx RANGE 1 ${NUM_PROPS_MINUS_1})
        list (GET ${FROM} ${idx} value)
        set_target_value(${TO} ${idx} ${value})
    endforeach()
endfunction()

function(add_target TNAME)
    create_target(${TNAME})
    set (value 0)
    set (processing_custom_args False)
    set (acc_custom_args "")
    while (value LESS ${ARGC})
        # Treat all the props the same but CUSTOM_ARGS different
        # because it will contain multiple args
        foreach (idx RANGE ${NUM_PROPS_MINUS_2})
            list (GET LIST_NAMES ${idx} PROP_NAME)
            if ("${ARGV${value}}" STREQUAL "${PROP_NAME}")    
                math (EXPR value "${value} + 1")
                if ("${PROP_NAME}" STREQUAL "PACKAGE_DIRS")
                    string (REPLACE ";" "_&_" OUTVAL "${ARGV${value}}")
                    set_target_value(${TNAME} ${idx} ${OUTVAL})
                else()
                    set_target_value(${TNAME} ${idx} ${ARGV${value}})
                endif()
                set (processing_custom_args False)
            endif()
        endforeach()
        
        if ("${ARGV${value}}" STREQUAL "INHERIT")
                math (EXPR value "${value} + 1")
                set (processing_custom_args False)
                copy_target("${ARGV${value}}" "${TNAME}")                
        endif()
        # we have to do this to allow CUSTOM_ARGS to span multiple ARGS
        if (processing_custom_args)
            set (acc_custom_args "${acc_custom_args}${ARGV${value}}")
        endif()
        if ("${ARGV${value}}" STREQUAL "CUSTOM_ARGS")    
            set (processing_custom_args True)
        endif()
        math (EXPR value "${value} + 1")
    endwhile()
    if (NOT "${acc_custom_args}" STREQUAL "")
        set_target_value(${TNAME} ${CUSTOM_ARGS} "${acc_custom_args}")
    endif()
    print_target(${TNAME})
endfunction()

include (${CMAKE_SOURCE_DIR}/config_new.cmake)
